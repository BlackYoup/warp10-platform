#!/bin/sh

#
# Warp 10 - Standalone
#
# chkconfig: 2345 90 30
# description: Manage Standalone instance of Warp 10
#

WARP10_USER=warp10
#WARP10_HOME=/opt/warp10-@VERSION@

#
# Make sure the caller is root
#

if [ "`whoami`" != "root" ]; then
  echo "You must be root to run '$0'"
  exit 1
fi

# If WARP10_HOME is not defined, set it to the parent directory
if [ -z "${WARP10_HOME}" ]; then
  if [ "Darwin" = "${OS}" ]
  then
    pushd $(dirname $0)/.. > /dev/null 2>&1
    WARP10_HOME=`pwd`
    popd > /dev/null 2>&1
  else
    WARP10_HOME=$(dirname $(readlink -f $0))/..
  fi
fi

if [ "$1" = "bootstrap" ]; then
  ${WARP10_HOME}/bin/warp10-standalone.sh bootstrap
elif [ "$1" = "snapshot" ]; then
  if [ $# -ne 2 ]; then
    echo $"Usage: $0 {snapshot 'snapshot_name'}"
    exit 2
  fi
  su ${WARP10_USER} -c "${WARP10_HOME}/bin/warp10-standalone.sh snapshot $2"
else
  su ${WARP10_USER} -c "${WARP10_HOME}/bin/warp10-standalone.sh $1"
fi

  sed -i -e "s_^standalone\.home.*_standalone\.home = ${WARP10_HOME}_" ${WARP10_HOME}/templates/conf-standalone.template
  sed -i -e "s_^LEVELDB\_HOME=.*_LEVELDB\_HOME=${LEVELDB_HOME}_" ${WARP10_HOME}/bin/snapshot.sh

  sed -i -e "s_warpLog\.File=.*_warpLog\.File=${WARP10_HOME}/logs/warp10.log_" ${WARP10_HOME}/etc/log4j.properties
  sed -i -e "s_warpscriptLog\.File=.*_warpscriptLog\.File=${WARP10_HOME}/logs/warpscript.out_" ${WARP10_HOME}/etc/log4j.properties

  # Generate the configuration file with Worf
  # Generate read/write tokens valid for a period of 100 years. We use 'io.warp10.bootstrap' as application name.
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -cp ${WARP10_JAR} io.warp10.worf.Worf -q -a io.warp10.bootstrap -puidg -t -ttl 3153600000000 ${WARP10_HOME}/templates/conf-standalone.template -o ${WARP10_CONFIG}" >> ${WARP10_HOME}/etc/initial.tokens

  echo "Warp10 config has been generated here: ${WARP10_CONFIG}"

  #
  # Output the generated tokens
  #

  READ_TOKEN=`tail -n 1 ${WARP10_HOME}/etc/initial.tokens | sed -e 's/{"read":{"token":"//' -e 's/".*//'`
  WRITE_TOKEN=`tail -n 1 ${WARP10_HOME}/etc/initial.tokens | sed -e 's/.*,"write":{"token":"//' -e 's/".*//'`

  INITCONFIG=true

}

start() {
  CHECK_JAVA7="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -version 2>&1 | head -n 1 | grep '.*\\"1.7.*'"`"
  if [ "$CHECK_JAVA7" != "" ]; then
    IS_JAVA7=true
  fi

  # warp10 user ?
  if ! id -u "${WARP10_USER}" >/dev/null 2>&1;
  then
    echo "User '${WARP10_USER}'' does not exist - Creating it.."
    # Create user warp10
    if [ "`which useradd`" = "" ]
    then
      if [ "`which adduser`" != "" ]
      then
        adduser -D -s -H -h ${WARP10_HOME} -s /bin/bash ${WARP10_USER}
      else
        echo "Hmmm that's embarassing but I do not know how to create the ${WARP10_USER} user with home directory ${WARP10_HOME}, could you do it for me and run the script again?"
        exit 1
      fi
    else
      useradd -d ${WARP10_HOME} -M -r ${WARP10_USER} -s /bin/bash
    fi
  fi

  if [ -f ${JAVA_HEAP_DUMP} ]; then
    mv ${JAVA_HEAP_DUMP} ${JAVA_HEAP_DUMP}-`date +%s`
  fi

  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`" != "" ]; then
    echo "Start failed! - A Warp 10 instance is currently running"
    exit 1
  fi

  #
  # Config file exists ?
  #
  if [ ! -e ${WARP10_CONFIG} ]; then
    echo "Config file does not exist - Creating it from template..."
    initConfig
  fi

  LEVELDB_HOME="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'leveldb.home'" | grep 'leveldb.home' | sed -e 's/^.*=//'`"

  #
  # Leveldb exists ?
  #
  if [ ! -e ${LEVELDB_HOME} ]; then
    echo "${LEVELDB_HOME} does not exist - Creating it..."
    su ${WARP10_USER} -c "mkdir -p ${LEVELDB_HOME} 2>&1"
    if [ $? != 0 ]; then
      echo "${LEVELDB_HOME} creation failed"
      exit 1
    fi
  fi

  if [ "$(find -L ${LEVELDB_HOME} -maxdepth 1 -type f | wc -l)" -eq 0 ]; then
    echo "Init leveldb"
    # Create leveldb database
    su ${WARP10_USER} -c "echo \"Init leveldb database...\" >> ${WARP10_HOME}/logs/warp10.log"
    su ${WARP10_USER} -c "${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${WARP10_CP} ${WARP10_INIT} ${LEVELDB_HOME} >> ${WARP10_HOME}/logs/warp10.log 2>&1"
  fi

  WARP10_LISTENSTO_HOST="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'standalone.host'" | grep 'standalone.host' | sed -e 's/^.*=//'`"
  WARP10_LISTENSTO_PORT="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'standalone.port'" | grep 'standalone.port' | sed -e 's/^.*=//'`"
  WARP10_LISTENSTO="${WARP10_LISTENSTO_HOST}:${WARP10_LISTENSTO_PORT}"

  #
  # Check if Warp10 Quantum plugin is defined
  #
  QUANTUM_PLUGIN="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'warp10.plugins'" | grep ${QUANTUM_PLUGIN_NAME}`"

  if [ "$QUANTUM_PLUGIN" != "" ]; then
    if [ "$IS_JAVA7" = false ]; then
      IS_QUANTUM_STARTED=true
      # Add Quantum to WARP10_CP
      WARP10_CP=${QUANTUM_PLUGIN_JAR}:${WARP10_CP}
      QUANTUM_LISTENSTO_HOST="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'quantum.host'" | grep 'quantum.host' | sed -e 's/^.*=//'`"
      QUANTUM_LISTENSTO_PORT="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'quantum.port'" | grep 'quantum.port' | sed -e 's/^.*=//'`"
      QUANTUM_LISTENSTO="${QUANTUM_LISTENSTO_HOST}:${QUANTUM_LISTENSTO_PORT}"
    else
      echo "Start failed! - Quantum is only Java 1.8+ compliant - To start Warp10 with Java7 comment out Quantum plugin in the Warp config file"
      exit 1
    fi
  else
    IS_QUANTUM_STARTED=false
    # Do not add Quantum to WARP10_CP
  fi

  #
  # Start Warp10 instance..
  #
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${WARP10_CP} ${WARP10_CLASS} ${WARP10_CONFIG} >> ${WARP10_HOME}/logs/warp10.log 2>&1 &"

  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`" = "" ]; then
    echo "Start failed! - See warp10.log for more details"
    exit 1
  fi

  echo '  ___       __                           ____________   '
  echo '  __ |     / /_____ _______________      __<  /_  __ \  '
  echo '  __ | /| / /_  __ `/_  ___/__  __ \     __  /_  / / /  '
  echo '  __ |/ |/ / / /_/ /_  /   __  /_/ /     _  / / /_/ /   '
  echo '  ____/|__/  \__,_/ /_/    _  .___/      /_/  \____/    '
  echo '                           /_/                          '

  echo "##"
  echo "## Warp 10 listens on ${WARP10_LISTENSTO}"
  echo "##"
  if [ "$IS_QUANTUM_STARTED" = true ]; then
    echo "## Quantum listens on ${QUANTUM_LISTENSTO}"
    echo "##"
  fi

  if [ "$INITCONFIG" = true ]; then
      echo "##"
      echo "## An initial set of tokens was generated for you so you can immediately use Warp 10:"
      echo "##"
      echo "## Write Token: ${WRITE_TOKEN}"
      echo "## Read Token: ${READ_TOKEN}"
      echo "##"
      echo "## Push some test data using:"
      echo "##"
      echo "##   curl -H 'X-Warp10-Token: ${WRITE_TOKEN}' http://${WARP10_LISTENSTO}/api/v0/update --data-binary '// test{} 42'"
      echo "##"
      echo "## And read it back using:"
      echo "##"
      echo "##   curl 'http://${WARP10_LISTENSTO}/api/v0/fetch?token=${READ_TOKEN}&selector=~.*\{\}&now=now&timespan=-1'"
      echo "##"
      echo "## You can submit WarpScript for execution via:"
      echo "##"
      echo "##   curl http://${WARP10_LISTENSTO}/api/v0/exec --data-binary @path/to/WarpScriptFile"
      echo "##"
      if [ "$IS_QUANTUM_STARTED" = true ]; then
        echo "## The alternative to command-line interaction is Quantum, a web application to interact with the platform in an user-friendly way:"
        echo "##"
        echo "##   http://${QUANTUM_LISTENSTO}"
        echo "##"
      fi

  fi
}

stop() {
  echo "Stop Warp10..."
  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`" != "" ]
  then
    kill `su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`
  else
    echo "No instance of Warp 10 is currently running"
  fi
}

status() {
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}"
}

snapshot() {
  # Name of snapshot
  SNAPSHOT=$1
  ${WARP10_HOME}/bin/snapshot.sh ${SNAPSHOT} "${WARP10_HOME}" "${LEVELDB_HOME}" 
}

worfcli() {
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -cp ${WARP10_JAR} io.warp10.worf.Worf ${WARP10_CONFIG} -i"
}

worf() {
  if [ "$#" -ne 3 ]; then
    echo "Usage: $0 $1 appName ttl(ms)"
    exit 1
  fi
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -cp ${WARP10_JAR} io.warp10.worf.Worf ${WARP10_CONFIG} -puidg -t -a $2 -ttl $3"
}

# See how we were called.
case "$1" in
  start)
  start
  ;;
  stop)
  stop
  ;;
  status)
  status
  ;;
  restart)
  stop
  sleep 2
  start
  ;;
  worfcli)
  worfcli
  ;;
  worf)
  worf "$@"
  ;;
  snapshot)
  snapshot "$2"
  ;;
  *)
  echo $"Usage: $0 {start|stop|status|worfcli|worf appName ttl(ms)|snapshot 'snapshot_name'}"
  exit 2
esac

exit $?
