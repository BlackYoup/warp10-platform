#!/bin/sh

#
# Warp 10 - Standalone
#
# chkconfig: 2345 90 30
# description: Manage Standalone instance of Warp 10
#

#
# Make sure the caller is root
#

if [ "`whoami`" != "root" ]
then
  echo "You must be root to run this script."
  exit 1
fi

OS=$(uname -s)

#JAVA_HOME=/opt/java8
#WARP10_HOME=/opt/warp10-@VERSION@

# If WARP10_HOME is not defined, set it to the parent directory
if [ -z "${WARP10_HOME}" ]; then
  if [ "Darwin" = "${OS}" ]
  then
    pushd $(dirname $0)/.. > /dev/null 2>&1
    WARP10_HOME=`pwd`
    popd > /dev/null 2>&1
  else
    WARP10_HOME=$(dirname $(readlink -f $0))/..
  fi
fi

WARP10_REVISION=@VERSION@
WARP10_USER=warp10
WARP10_CONFIG=${WARP10_HOME}/etc/conf-standalone.conf
WARP10_JAR=${WARP10_HOME}/bin/warp10-${WARP10_REVISION}.jar
WARP10_CLASS=io.warp10.standalone.Warp
WARP10_INIT=io.warp10.standalone.WarpInit
WARP10_CP=etc:${WARP10_JAR}
WARP10_HEAP=1g
WARP10_HEAP_MAX=1g
INITCONFIG=false

QUANTUM_REVISION=@QUANTUM_VERSION@
QUANTUM_JAR=${WARP10_HOME}/bin/warp10-quantum-server-${QUANTUM_REVISION}.jar
QUANTUM_HEAP=64m
QUANTUM_HEAP_MAX=64m
QUANTUM_JAVA_OPTS="-Djava.awt.headless=true -Xms${QUANTUM_HEAP} -Xmx${QUANTUM_HEAP_MAX} -XX:+UseG1GC"

SENSISION_EVENTS_DIR=/var/run/sensision/metrics

LOG4J_CONF=${WARP10_HOME}/etc/log4j.properties
JAVA_HEAP_DUMP=${WARP10_HOME}/logs/java.heapdump
JAVA_OPTS="-Djava.awt.headless=true -Dlog4j.configuration=file:${LOG4J_CONF} -Dsensision.server.port=0 -Dsensision.events.dir=${SENSISION_EVENTS_DIR} -Xms${WARP10_HEAP} -Xmx${WARP10_HEAP_MAX} -XX:+UseG1GC"
export MALLOC_ARENA_MAX=1

initConfig() {
  echo "Init config.."

  # Fix ownership
  echo "Fix ownership.."
  echo "WARP10_HOME: ${WARP10_HOME}"
  chown -R ${WARP10_USER} ${WARP10_HOME}

  # Fix permissions
  echo "Fix permissions.."
  chmod 755 ${WARP10_HOME}
  chmod 755 ${WARP10_HOME}/bin
  chmod 755 ${WARP10_HOME}/etc
  chmod 755 ${WARP10_HOME}/macros
  chmod 755 ${WARP10_HOME}/logs
  chmod 755 ${WARP10_HOME}/jars
  chmod 755 ${WARP10_HOME}/templates
  chmod 755 ${WARP10_HOME}/warpscripts
  chmod 755 ${WARP10_HOME}/etc/throttle
  chmod 755 ${WARP10_HOME}/etc/trl
  chmod 755 ${WARP10_HOME}/etc/bootstrap
  chmod 644 ${WARP10_HOME}/etc/bootstrap/*.mc2
  chmod -R 755 ${WARP10_HOME}/data
  chmod 755 ${WARP10_HOME}/bin/*.sh
  chmod 755 ${WARP10_HOME}/bin/*.init
  chmod 644 ${WARP10_HOME}/bin/warp10-@VERSION@.jar

  #sed -e "s_^standalone\.home.*_standalone\.home = ${WARP10_HOME}_" ${WARP10_HOME}/templates/conf-standalone.template > ${WARP10_HOME}/templates/conf-standalone.template.new
  #mv -f ${WARP10_HOME}/templates/conf-standalone.template.new ${WARP10_HOME}/templates/conf-standalone.template
  #sed -e "s_^LEVELDB\_HOME=.*_LEVELDB\_HOME=${WARP10_HOME}/data_" ${WARP10_HOME}/bin/snapshot.sh > ${WARP10_HOME}/bin/snapshot.sh.new
  #mv -f ${WARP10_HOME}/bin/snapshot.sh.new ${WARP10_HOME}/bin/snapshot.sh

  sed -i -e "s_^standalone\.home.*_standalone\.home = ${WARP10_HOME}_" ${WARP10_HOME}/templates/conf-standalone.template
  sed -i -e "s_^LEVELDB\_HOME=.*_LEVELDB\_HOME=${WARP10_HOME}/data_" ${WARP10_HOME}/bin/snapshot.sh

  #sed -e "s_warpLog\.File=.*_warpLog\.File=${WARP10_HOME}/logs/warp10.log_" ${WARP10_HOME}/etc/log4j.properties > ${WARP10_HOME}/etc/log4j.properties.new
  #mv -f ${WARP10_HOME}/etc/log4j.properties.new ${WARP10_HOME}/etc/log4j.properties
  #sed -e "s_warpscriptLog\.File=.*_warpscriptLog\.File=${WARP10_HOME}/logs/warpscript.out_" ${WARP10_HOME}/etc/log4j.properties > ${WARP10_HOME}/etc/log4j.properties.new
  #mv -f ${WARP10_HOME}/etc/log4j.properties.new ${WARP10_HOME}/etc/log4j.properties

  sed -i -e "s_warpLog\.File=.*_warpLog\.File=${WARP10_HOME}/logs/warp10.log_" ${WARP10_HOME}/etc/log4j.properties
  sed -i -e "s_warpscriptLog\.File=.*_warpscriptLog\.File=${WARP10_HOME}/logs/warpscript.out_" ${WARP10_HOME}/etc/log4j.properties

  # Generate the configuration file with Worf
  # Generate read/write tokens valid for a period of 100 years. We use 'io.warp10.bootstrap' as application name.
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -cp ${WARP10_JAR} io.warp10.worf.Worf -a io.warp10.bootstrap -puidg -t -ttl 3153600000000 ${WARP10_HOME}/templates/conf-standalone.template -o ${WARP10_CONFIG}" >> ${WARP10_HOME}/etc/initial.tokens

  #
  # Output the generated tokens
  #

  READ_TOKEN=`tail -n 1 ${WARP10_HOME}/etc/initial.tokens | sed -e 's/{"read":{"token":"//' -e 's/".*//'`
  WRITE_TOKEN=`tail -n 1 ${WARP10_HOME}/etc/initial.tokens | sed -e 's/.*,"write":{"token":"//' -e 's/".*//'`

  INITCONFIG=true

}

start() {
  if [ -z "$JAVA_HOME" ]; then
    echo "JAVA_HOME not set";
    exit 1
  fi

  # warp10 user ?
  if ! id -u "${WARP10_USER}" >/dev/null 2>&1;
  then
    echo "User '${WARP10_USER}'' does not exist - Creating it.."
    # Create user warp10
    if [ "`which useradd`" = "" ]
    then
      if [ "`which adduser`" != "" ]
      then
        adduser -D -s -H -h ${WARP10_HOME} -s /bin/bash ${WARP10_USER}
      else
        echo "Hmmm that's embarassing but I do not know how to create the ${WARP10_USER} user with home directory ${WARP10_HOME}, could you do it for me and run the script again?"
        exit 1
      fi
    else
      useradd -d ${WARP10_HOME} -M -r ${WARP10_USER} -s /bin/bash
    fi
  fi

  if [ -f ${JAVA_HEAP_DUMP} ]; then
    mv ${JAVA_HEAP_DUMP} ${JAVA_HEAP_DUMP}-`date +%s`
  fi

  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`" != "" ]
  then
    echo "Start failed! - A Warp 10 instance is currently running"
    exit 1
  fi

  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep warp10-quantum-server-${QUANTUM_REVISION}|cut -f 1 -d' '"`" != "" ]
  then
    echo "Start failed! - A Quantum instance is currently running"
    exit 1
  fi

  #
  # Config file exists ?
  #
  if [ ! -e ${WARP10_CONFIG} ]; then
    echo "Config file does not exist - Creating it from template..."
    initConfig
  fi

  #
  # Leveldb exists ?
  #
  if [ "$(find ${WARP10_HOME}/data -maxdepth 1 -type f | wc -l)" -eq 0 ]; then
    echo "Init leveldb"
    # Create leveldb database
    su ${WARP10_USER} -c "echo \"Init leveldb database...\" >> ${WARP10_HOME}/logs/warp10.log"
    su ${WARP10_USER} -c "${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${WARP10_CP} ${WARP10_INIT} ${WARP10_HOME}/data >> ${WARP10_HOME}/logs/warp10.log 2>&1"
  fi

  #
  # Start Warp10 instance..
  #
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${WARP10_CP} ${WARP10_CLASS} ${WARP10_CONFIG} >> ${WARP10_HOME}/logs/warp10.log 2>&1 &"

  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`" = "" ]
  then
    echo "Start failed! - See warp10.log for more details"
    exit 1
  fi

  #
  # Start Quantum..
  #
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java ${QUANTUM_JAVA_OPTS} -jar ${QUANTUM_JAR} ${WARP10_CONFIG} >> ${WARP10_HOME}/logs/quantum.log 2>&1 &"

  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep warp10-quantum-server-${QUANTUM_REVISION}|cut -f 1 -d' '"`" = "" ]
  then
    echo "Start Quantum has failed! - See quantum.log for more details"
  fi

  WARP10_LISTENSTO_HOST="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'standalone.host'" | grep 'standalone.host' | sed -e 's/^.*=//'`"
  WARP10_LISTENSTO_PORT="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'standalone.port'" | grep 'standalone.port' | sed -e 's/^.*=//'`"
  QUANTUM_LISTENSTO_HOST="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'quantum.host'" | grep 'quantum.host' | sed -e 's/^.*=//'`"
  QUANTUM_LISTENSTO_PORT="`su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -Xms64m -Xmx64m -XX:+UseG1GC -cp ${WARP10_CP} io.warp10.WarpConfig ${WARP10_CONFIG} 'quantum.port'" | grep 'quantum.port' | sed -e 's/^.*=//'`"

  WARP10_LISTENSTO="${WARP10_LISTENSTO_HOST}:${WARP10_LISTENSTO_PORT}"

  QUANTUM_LISTENSTO="${QUANTUM_LISTENSTO_HOST}:${QUANTUM_LISTENSTO_PORT}"

  echo '  ___       __                           ____________   '
  echo '  __ |     / /_____ _______________      __<  /_  __ \  '
  echo '  __ | /| / /_  __ `/_  ___/__  __ \     __  /_  / / /  '
  echo '  __ |/ |/ / / /_/ /_  /   __  /_/ /     _  / / /_/ /   '
  echo '  ____/|__/  \__,_/ /_/    _  .___/      /_/  \____/    '
  echo '                           /_/                          '

  echo "##"
  echo "## Warp 10 listens on ${WARP10_LISTENSTO}"
  echo "##"
  echo "## Quantum listens on ${QUANTUM_LISTENSTO}"
  echo "##"


  if [ "$INITCONFIG" = true ]; then
      echo "##"
      echo "## An initial set of tokens was generated for you so you can immediately use Warp 10:"
      echo "##"
      echo "## Write Token: ${WRITE_TOKEN}"
      echo "## Read Token: ${READ_TOKEN}"
      echo "##"
      echo "## Push some test data using:"
      echo "##"
      echo "##   curl -H 'X-Warp10-Token: ${WRITE_TOKEN}' http://${WARP10_LISTENSTO}/api/v0/update --data-binary '// test{} 42'"
      echo "##"
      echo "## And read it back using:"
      echo "##"
      echo "##   curl 'http://${WARP10_LISTENSTO}/api/v0/fetch?token=${READ_TOKEN}&selector=~.*\{\}&now=now&timespan=-1'"
      echo "##"
      echo "## You can submit WarpScript for execution via:"
      echo "##"
      echo "##   curl http://${WARP10_LISTENSTO}/api/v0/exec --data-binary @path/to/WarpScriptFile"
      echo "##"
      echo "## The alternative to command-line interaction is Quantum, a web application to interact with the platform in an user-friendly way:"
      echo "##"
      echo "##   http://${QUANTUM_LISTENSTO}"
      echo "##"
  fi
}

stop() {
  echo "Stop Warp10..."
  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`" != "" ]
  then
    kill `su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}|cut -f 1 -d' '"`
  else
    echo "No instance of Warp 10 is currently running"
  fi

  echo "Stop Quantum..."
  if [ "`su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep warp10-quantum-server-${QUANTUM_REVISION}|cut -f 1 -d' '"`" != "" ]
  then
    kill `su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep warp10-quantum-server-${QUANTUM_REVISION}|cut -f 1 -d' '"`
  else
    echo "No instance of Quantum is currently running"
  fi
}

status() {
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep ${WARP10_CLASS}"
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/jps -lm|grep warp10-quantum-server-${QUANTUM_REVISION}"
}

snapshot() {
  # Name of snapshot
  SNAPSHOT=$1
  ${WARP10_HOME}/bin/snapshot.sh ${SNAPSHOT}
}

worf() {
  su ${WARP10_USER} -c "${JAVA_HOME}/bin/java -cp ${WARP10_CP} io.warp10.worf.Worf -i ${WARP10_CONFIG}"
}

# See how we were called.
case "$1" in
  start)
  start
  ;;
  stop)
  stop
  ;;
  status)
  status
  ;;
  restart)
  stop
  sleep 2
  start
  ;;
  worf)
  worf
  ;;
  snapshot)
  snapshot "$2"
  ;;
  *)
  echo $"Usage: $0 {start|stop|status|worf|snapshot 'snapshot_name'}"
  exit 2
esac

exit $?
